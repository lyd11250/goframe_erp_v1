// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// OrderItemDao is the data access object for table order_item.
type OrderItemDao struct {
	table   string           // table is the underlying table name of the DAO.
	group   string           // group is the database configuration group name of current DAO.
	columns OrderItemColumns // columns contains all the column names of Table for convenient usage.
}

// OrderItemColumns defines and stores column names for table order_item.
type OrderItemColumns struct {
	OrderId  string // 单据ID
	GoodsId  string // 商品ID
	Price    string // 出/入库单价
	Amount   string // 订单项总价格
	Quantity string // 出/入库数量
	Notes    string // 备注
}

// orderItemColumns holds the columns for table order_item.
var orderItemColumns = OrderItemColumns{
	OrderId:  "order_id",
	GoodsId:  "goods_id",
	Price:    "price",
	Amount:   "amount",
	Quantity: "quantity",
	Notes:    "notes",
}

// NewOrderItemDao creates and returns a new DAO object for table data access.
func NewOrderItemDao() *OrderItemDao {
	return &OrderItemDao{
		group:   "default",
		table:   "order_item",
		columns: orderItemColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OrderItemDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *OrderItemDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *OrderItemDao) Columns() OrderItemColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *OrderItemDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OrderItemDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OrderItemDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
