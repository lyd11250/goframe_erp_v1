// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// OrderDetailDao is the data access object for table order_detail.
type OrderDetailDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns OrderDetailColumns // columns contains all the column names of Table for convenient usage.
}

// OrderDetailColumns defines and stores column names for table order_detail.
type OrderDetailColumns struct {
	OrderId     string // 订单ID
	GoodsId     string // 商品ID
	Quantity    string // 订购数量
	GoodsPrice  string // 商品原价
	ActualPrice string // 实际售价
}

// orderDetailColumns holds the columns for table order_detail.
var orderDetailColumns = OrderDetailColumns{
	OrderId:     "order_id",
	GoodsId:     "goods_id",
	Quantity:    "quantity",
	GoodsPrice:  "goods_price",
	ActualPrice: "actual_price",
}

// NewOrderDetailDao creates and returns a new DAO object for table data access.
func NewOrderDetailDao() *OrderDetailDao {
	return &OrderDetailDao{
		group:   "default",
		table:   "order_detail",
		columns: orderDetailColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OrderDetailDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *OrderDetailDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *OrderDetailDao) Columns() OrderDetailColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *OrderDetailDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OrderDetailDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OrderDetailDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
